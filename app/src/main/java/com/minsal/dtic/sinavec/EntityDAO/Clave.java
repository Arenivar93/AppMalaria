package com.minsal.dtic.sinavec.EntityDAO;

import org.greenrobot.greendao.annotation.*;

import com.minsal.dtic.sinavec.EntityDAO.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "CLAVE".
 */
@Entity(active = true)
public class Clave {

    @Id
    private Long id;
    private Integer idDepartamento;
    private Integer idMunicipio;
    private Integer correlativo;
    private String clave;
    private long idProcedencia;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient ClaveDao myDao;

    @ToOne(joinProperty = "idProcedencia")
    private CtlProcedencia ctlProcedencia;

    @Generated
    private transient Long ctlProcedencia__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Clave() {
    }

    public Clave(Long id) {
        this.id = id;
    }

    @Generated
    public Clave(Long id, Integer idDepartamento, Integer idMunicipio, Integer correlativo, String clave, long idProcedencia) {
        this.id = id;
        this.idDepartamento = idDepartamento;
        this.idMunicipio = idMunicipio;
        this.correlativo = correlativo;
        this.clave = clave;
        this.idProcedencia = idProcedencia;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getClaveDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getIdDepartamento() {
        return idDepartamento;
    }

    public void setIdDepartamento(Integer idDepartamento) {
        this.idDepartamento = idDepartamento;
    }

    public Integer getIdMunicipio() {
        return idMunicipio;
    }

    public void setIdMunicipio(Integer idMunicipio) {
        this.idMunicipio = idMunicipio;
    }

    public Integer getCorrelativo() {
        return correlativo;
    }

    public void setCorrelativo(Integer correlativo) {
        this.correlativo = correlativo;
    }

    public String getClave() {
        return clave;
    }

    public void setClave(String clave) {
        this.clave = clave;
    }

    public long getIdProcedencia() {
        return idProcedencia;
    }

    public void setIdProcedencia(long idProcedencia) {
        this.idProcedencia = idProcedencia;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public CtlProcedencia getCtlProcedencia() {
        long __key = this.idProcedencia;
        if (ctlProcedencia__resolvedKey == null || !ctlProcedencia__resolvedKey.equals(__key)) {
            __throwIfDetached();
            CtlProcedenciaDao targetDao = daoSession.getCtlProcedenciaDao();
            CtlProcedencia ctlProcedenciaNew = targetDao.load(__key);
            synchronized (this) {
                ctlProcedencia = ctlProcedenciaNew;
            	ctlProcedencia__resolvedKey = __key;
            }
        }
        return ctlProcedencia;
    }

    @Generated
    public void setCtlProcedencia(CtlProcedencia ctlProcedencia) {
        if (ctlProcedencia == null) {
            throw new DaoException("To-one property 'idProcedencia' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.ctlProcedencia = ctlProcedencia;
            idProcedencia = ctlProcedencia.getId();
            ctlProcedencia__resolvedKey = idProcedencia;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
