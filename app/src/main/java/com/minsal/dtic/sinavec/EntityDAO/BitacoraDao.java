package com.minsal.dtic.sinavec.EntityDAO;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BITACORA".
*/
public class BitacoraDao extends AbstractDao<Bitacora, Long> {

    public static final String TABLENAME = "BITACORA";

    /**
     * Properties of entity Bitacora.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Operacion = new Property(1, String.class, "operacion", false, "OPERACION");
        public final static Property SentenciaSql = new Property(2, String.class, "sentenciaSql", false, "SENTENCIA_SQL");
        public final static Property NombreTabla = new Property(3, String.class, "nombreTabla", false, "NOMBRE_TABLA");
        public final static Property IdTablet = new Property(4, Long.class, "idTablet", false, "ID_TABLET");
        public final static Property BanderaEstado = new Property(5, String.class, "banderaEstado", false, "BANDERA_ESTADO");
    }


    public BitacoraDao(DaoConfig config) {
        super(config);
    }
    
    public BitacoraDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BITACORA\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"OPERACION\" TEXT," + // 1: operacion
                "\"SENTENCIA_SQL\" TEXT," + // 2: sentenciaSql
                "\"NOMBRE_TABLA\" TEXT," + // 3: nombreTabla
                "\"ID_TABLET\" INTEGER," + // 4: idTablet
                "\"BANDERA_ESTADO\" TEXT);"); // 5: banderaEstado
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BITACORA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Bitacora entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String operacion = entity.getOperacion();
        if (operacion != null) {
            stmt.bindString(2, operacion);
        }
 
        String sentenciaSql = entity.getSentenciaSql();
        if (sentenciaSql != null) {
            stmt.bindString(3, sentenciaSql);
        }
 
        String nombreTabla = entity.getNombreTabla();
        if (nombreTabla != null) {
            stmt.bindString(4, nombreTabla);
        }
 
        Long idTablet = entity.getIdTablet();
        if (idTablet != null) {
            stmt.bindLong(5, idTablet);
        }
 
        String banderaEstado = entity.getBanderaEstado();
        if (banderaEstado != null) {
            stmt.bindString(6, banderaEstado);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Bitacora entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String operacion = entity.getOperacion();
        if (operacion != null) {
            stmt.bindString(2, operacion);
        }
 
        String sentenciaSql = entity.getSentenciaSql();
        if (sentenciaSql != null) {
            stmt.bindString(3, sentenciaSql);
        }
 
        String nombreTabla = entity.getNombreTabla();
        if (nombreTabla != null) {
            stmt.bindString(4, nombreTabla);
        }
 
        Long idTablet = entity.getIdTablet();
        if (idTablet != null) {
            stmt.bindLong(5, idTablet);
        }
 
        String banderaEstado = entity.getBanderaEstado();
        if (banderaEstado != null) {
            stmt.bindString(6, banderaEstado);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Bitacora readEntity(Cursor cursor, int offset) {
        Bitacora entity = new Bitacora( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // operacion
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sentenciaSql
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nombreTabla
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // idTablet
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // banderaEstado
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Bitacora entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOperacion(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSentenciaSql(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNombreTabla(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIdTablet(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setBanderaEstado(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Bitacora entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Bitacora entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Bitacora entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
