package com.minsal.dtic.sinavec.EntityDAO;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table "CTL_SEMANA_EPI".
 */
public class CtlSemanaEpiDao extends AbstractDao<CtlSemanaEpi, Long> {

    public static final String TABLENAME = "CTL_SEMANA_EPI";

    /**
     * Properties of entity CtlSemanaEpi.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Anio = new Property(1, Integer.class, "anio", false, "ANIO");
        public final static Property Semana = new Property(2, Integer.class, "semana", false, "SEMANA");
        public final static Property FechaInicio = new Property(3, String.class, "fechaInicio", false, "FECHA_INICIO");
        public final static Property FechaFin = new Property(4, String.class, "fechaFin", false, "FECHA_FIN");
    }


    public CtlSemanaEpiDao(DaoConfig config) {
        super(config);
    }

    public CtlSemanaEpiDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CTL_SEMANA_EPI\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ANIO\" INTEGER," + // 1: anio
                "\"SEMANA\" INTEGER," + // 2: semana
                "\"FECHA_INICIO\" DATE," + // 3: fechaInicio
                "\"FECHA_FIN\" DATE);"); // 4: fechaFin
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CTL_SEMANA_EPI\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CtlSemanaEpi entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Integer anio = entity.getAnio();
        if (anio != null) {
            stmt.bindLong(2, anio);
        }

        Integer semana = entity.getSemana();
        if (semana != null) {
            stmt.bindLong(3, semana);
        }

        String fechaInicio = entity.getFechaInicio();
        if (fechaInicio != null) {
            stmt.bindString(4, fechaInicio);
        }

        String fechaFin = entity.getFechaFin();
        if (fechaFin != null) {
            stmt.bindString(5, fechaFin);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CtlSemanaEpi entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Integer anio = entity.getAnio();
        if (anio != null) {
            stmt.bindLong(2, anio);
        }

        Integer semana = entity.getSemana();
        if (semana != null) {
            stmt.bindLong(3, semana);
        }

        String fechaInicio = entity.getFechaInicio();
        if (fechaInicio != null) {
            stmt.bindString(4, fechaInicio);
        }

        String fechaFin = entity.getFechaFin();
        if (fechaFin != null) {
            stmt.bindString(5, fechaFin);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public CtlSemanaEpi readEntity(Cursor cursor, int offset) {
        CtlSemanaEpi entity = new CtlSemanaEpi( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // anio
                cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // semana
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fechaInicio
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // fechaFin
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, CtlSemanaEpi entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAnio(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setSemana(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setFechaInicio(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFechaFin(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
    }

    @Override
    protected final Long updateKeyAfterInsert(CtlSemanaEpi entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(CtlSemanaEpi entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CtlSemanaEpi entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}