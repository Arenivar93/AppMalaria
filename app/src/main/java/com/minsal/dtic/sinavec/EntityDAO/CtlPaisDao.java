package com.minsal.dtic.sinavec.EntityDAO;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table "CTL_PAIS".
 */
public class CtlPaisDao extends AbstractDao<CtlPais, Long> {

    public static final String TABLENAME = "CTL_PAIS";

    /**
     * Properties of entity CtlPais.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Nombre = new Property(1, String.class, "nombre", false, "NOMBRE");
        public final static Property Activo = new Property(2, Integer.class, "activo", false, "ACTIVO");
    }


    public CtlPaisDao(DaoConfig config) {
        super(config);
    }

    public CtlPaisDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CTL_PAIS\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NOMBRE\" TEXT," + // 1: nombre
                "\"ACTIVO\" INTEGER);"); // 2: activo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CTL_PAIS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CtlPais entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(2, nombre);
        }

        Integer activo = entity.getActivo();
        if (activo != null) {
            stmt.bindLong(3, activo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CtlPais entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(2, nombre);
        }

        Integer activo = entity.getActivo();
        if (activo != null) {
            stmt.bindLong(3, activo );
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public CtlPais readEntity(Cursor cursor, int offset) {
        CtlPais entity = new CtlPais( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nombre
                cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2) // activo
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, CtlPais entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNombre(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setActivo(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
    }

    @Override
    protected final Long updateKeyAfterInsert(CtlPais entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(CtlPais entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CtlPais entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}