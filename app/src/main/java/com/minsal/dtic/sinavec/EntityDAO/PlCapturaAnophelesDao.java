package com.minsal.dtic.sinavec.EntityDAO;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PL_CAPTURA_ANOPHELES".
*/
public class PlCapturaAnophelesDao extends AbstractDao<PlCapturaAnopheles, Long> {

    public static final String TABLENAME = "PL_CAPTURA_ANOPHELES";

    /**
     * Properties of entity PlCapturaAnopheles.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property IdEstado = new Property(1, int.class, "idEstado", false, "ID_ESTADO");
        public final static Property TotalMosquitos = new Property(2, int.class, "totalMosquitos", false, "TOTAL_MOSQUITOS");
        public final static Property TotalAnopheles = new Property(3, int.class, "totalAnopheles", false, "TOTAL_ANOPHELES");
        public final static Property CasaPositiva = new Property(4, int.class, "casaPositiva", false, "CASA_POSITIVA");
        public final static Property CasaInspeccionada = new Property(5, Integer.class, "casaInspeccionada", false, "CASA_INSPECCIONADA");
        public final static Property ComponenteInspeccionado = new Property(6, Integer.class, "componenteInspeccionado", false, "COMPONENTE_INSPECCIONADO");
        public final static Property TiempoColecta = new Property(7, int.class, "tiempoColecta", false, "TIEMPO_COLECTA");
        public final static Property FechaHoraMod = new Property(8, java.util.Date.class, "fechaHoraMod", false, "FECHA_HORA_MOD");
        public final static Property Fecha = new Property(9, java.util.Date.class, "fecha", false, "FECHA");
        public final static Property FechaHoraReg = new Property(10, java.util.Date.class, "fechaHoraReg", false, "FECHA_HORA_REG");
        public final static Property Propietario = new Property(11, String.class, "propietario", false, "PROPIETARIO");
        public final static Property IdSemanaEpidemiologica = new Property(12, int.class, "idSemanaEpidemiologica", false, "ID_SEMANA_EPIDEMIOLOGICA");
        public final static Property IdUsuarioMod = new Property(13, long.class, "idUsuarioMod", false, "ID_USUARIO_MOD");
        public final static Property IdSibasi = new Property(14, long.class, "idSibasi", false, "ID_SIBASI");
        public final static Property IdTablet = new Property(15, long.class, "idTablet", false, "ID_TABLET");
        public final static Property IdCaserio = new Property(16, long.class, "idCaserio", false, "ID_CASERIO");
        public final static Property IdUsuarioReg = new Property(17, long.class, "idUsuarioReg", false, "ID_USUARIO_REG");
        public final static Property IdTipoCaptura = new Property(18, long.class, "idTipoCaptura", false, "ID_TIPO_CAPTURA");
        public final static Property IdTipoActividad = new Property(19, long.class, "idTipoActividad", false, "ID_TIPO_ACTIVIDAD");
    }

    private DaoSession daoSession;


    public PlCapturaAnophelesDao(DaoConfig config) {
        super(config);
    }
    
    public PlCapturaAnophelesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PL_CAPTURA_ANOPHELES\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ID_ESTADO\" INTEGER NOT NULL ," + // 1: idEstado
                "\"TOTAL_MOSQUITOS\" INTEGER NOT NULL ," + // 2: totalMosquitos
                "\"TOTAL_ANOPHELES\" INTEGER NOT NULL ," + // 3: totalAnopheles
                "\"CASA_POSITIVA\" INTEGER NOT NULL ," + // 4: casaPositiva
                "\"CASA_INSPECCIONADA\" INTEGER," + // 5: casaInspeccionada
                "\"COMPONENTE_INSPECCIONADO\" INTEGER," + // 6: componenteInspeccionado
                "\"TIEMPO_COLECTA\" INTEGER NOT NULL ," + // 7: tiempoColecta
                "\"FECHA_HORA_MOD\" INTEGER," + // 8: fechaHoraMod
                "\"FECHA\" INTEGER NOT NULL ," + // 9: fecha
                "\"FECHA_HORA_REG\" INTEGER," + // 10: fechaHoraReg
                "\"PROPIETARIO\" TEXT," + // 11: propietario
                "\"ID_SEMANA_EPIDEMIOLOGICA\" INTEGER NOT NULL ," + // 12: idSemanaEpidemiologica
                "\"ID_USUARIO_MOD\" INTEGER NOT NULL ," + // 13: idUsuarioMod
                "\"ID_SIBASI\" INTEGER NOT NULL ," + // 14: idSibasi
                "\"ID_TABLET\" INTEGER NOT NULL ," + // 15: idTablet
                "\"ID_CASERIO\" INTEGER NOT NULL ," + // 16: idCaserio
                "\"ID_USUARIO_REG\" INTEGER NOT NULL ," + // 17: idUsuarioReg
                "\"ID_TIPO_CAPTURA\" INTEGER NOT NULL ," + // 18: idTipoCaptura
                "\"ID_TIPO_ACTIVIDAD\" INTEGER NOT NULL ,"+"FOREIGN KEY(\"ID_SIBASI\")" +
                " REFERENCES CTL_ESTABLECIMIENTO(\"ID\") ON DELETE CASCADE,"+"FOREIGN KEY(\"ID_CASERIO\")" +
                " REFERENCES CTL_CASERIO(\"ID\") ON DELETE CASCADE,"+"FOREIGN KEY(\"ID_TABLET\")" +
                " REFERENCES CTL_TABLET(\"ID\") ON DELETE CASCADE,"+"FOREIGN KEY(\"ID_USUARIO_REG\")" +
                " REFERENCES FOS_USER_USER(\"ID\") ON DELETE CASCADE,"+"FOREIGN KEY(\"ID_TIPO_CAPTURA\")" +
                " REFERENCES PL_TIPO_CAPTURA(\"ID\") ON DELETE CASCADE,"+"FOREIGN KEY(\"ID_TIPO_ACTIVIDAD\")" +
                " REFERENCES PL_TIPO_ACTIVIDAD(\"ID\") ON DELETE CASCADE );"); // 19: idTipoActividad
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PL_CAPTURA_ANOPHELES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PlCapturaAnopheles entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIdEstado());
        stmt.bindLong(3, entity.getTotalMosquitos());
        stmt.bindLong(4, entity.getTotalAnopheles());
        stmt.bindLong(5, entity.getCasaPositiva());
 
        Integer casaInspeccionada = entity.getCasaInspeccionada();
        if (casaInspeccionada != null) {
            stmt.bindLong(6, casaInspeccionada);
        }
 
        Integer componenteInspeccionado = entity.getComponenteInspeccionado();
        if (componenteInspeccionado != null) {
            stmt.bindLong(7, componenteInspeccionado);
        }
        stmt.bindLong(8, entity.getTiempoColecta());
 
        java.util.Date fechaHoraMod = entity.getFechaHoraMod();
        if (fechaHoraMod != null) {
            stmt.bindLong(9, fechaHoraMod.getTime());
        }
        stmt.bindLong(10, entity.getFecha().getTime());
 
        java.util.Date fechaHoraReg = entity.getFechaHoraReg();
        if (fechaHoraReg != null) {
            stmt.bindLong(11, fechaHoraReg.getTime());
        }
 
        String propietario = entity.getPropietario();
        if (propietario != null) {
            stmt.bindString(12, propietario);
        }
        stmt.bindLong(13, entity.getIdSemanaEpidemiologica());
        stmt.bindLong(14, entity.getIdUsuarioMod());
        stmt.bindLong(15, entity.getIdSibasi());
        stmt.bindLong(16, entity.getIdTablet());
        stmt.bindLong(17, entity.getIdCaserio());
        stmt.bindLong(18, entity.getIdUsuarioReg());
        stmt.bindLong(19, entity.getIdTipoCaptura());
        stmt.bindLong(20, entity.getIdTipoActividad());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PlCapturaAnopheles entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIdEstado());
        stmt.bindLong(3, entity.getTotalMosquitos());
        stmt.bindLong(4, entity.getTotalAnopheles());
        stmt.bindLong(5, entity.getCasaPositiva());
 
        Integer casaInspeccionada = entity.getCasaInspeccionada();
        if (casaInspeccionada != null) {
            stmt.bindLong(6, casaInspeccionada);
        }
 
        Integer componenteInspeccionado = entity.getComponenteInspeccionado();
        if (componenteInspeccionado != null) {
            stmt.bindLong(7, componenteInspeccionado);
        }
        stmt.bindLong(8, entity.getTiempoColecta());
 
        java.util.Date fechaHoraMod = entity.getFechaHoraMod();
        if (fechaHoraMod != null) {
            stmt.bindLong(9, fechaHoraMod.getTime());
        }
        stmt.bindLong(10, entity.getFecha().getTime());
 
        java.util.Date fechaHoraReg = entity.getFechaHoraReg();
        if (fechaHoraReg != null) {
            stmt.bindLong(11, fechaHoraReg.getTime());
        }
 
        String propietario = entity.getPropietario();
        if (propietario != null) {
            stmt.bindString(12, propietario);
        }
        stmt.bindLong(13, entity.getIdSemanaEpidemiologica());
        stmt.bindLong(14, entity.getIdUsuarioMod());
        stmt.bindLong(15, entity.getIdSibasi());
        stmt.bindLong(16, entity.getIdTablet());
        stmt.bindLong(17, entity.getIdCaserio());
        stmt.bindLong(18, entity.getIdUsuarioReg());
        stmt.bindLong(19, entity.getIdTipoCaptura());
        stmt.bindLong(20, entity.getIdTipoActividad());
    }

    @Override
    protected final void attachEntity(PlCapturaAnopheles entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PlCapturaAnopheles readEntity(Cursor cursor, int offset) {
        PlCapturaAnopheles entity = new PlCapturaAnopheles( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // idEstado
            cursor.getInt(offset + 2), // totalMosquitos
            cursor.getInt(offset + 3), // totalAnopheles
            cursor.getInt(offset + 4), // casaPositiva
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // casaInspeccionada
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // componenteInspeccionado
            cursor.getInt(offset + 7), // tiempoColecta
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // fechaHoraMod
            new java.util.Date(cursor.getLong(offset + 9)), // fecha
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // fechaHoraReg
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // propietario
            cursor.getInt(offset + 12), // idSemanaEpidemiologica
            cursor.getLong(offset + 13), // idUsuarioMod
            cursor.getLong(offset + 14), // idSibasi
            cursor.getLong(offset + 15), // idTablet
            cursor.getLong(offset + 16), // idCaserio
            cursor.getLong(offset + 17), // idUsuarioReg
            cursor.getLong(offset + 18), // idTipoCaptura
            cursor.getLong(offset + 19) // idTipoActividad
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PlCapturaAnopheles entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdEstado(cursor.getInt(offset + 1));
        entity.setTotalMosquitos(cursor.getInt(offset + 2));
        entity.setTotalAnopheles(cursor.getInt(offset + 3));
        entity.setCasaPositiva(cursor.getInt(offset + 4));
        entity.setCasaInspeccionada(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setComponenteInspeccionado(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setTiempoColecta(cursor.getInt(offset + 7));
        entity.setFechaHoraMod(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setFecha(new java.util.Date(cursor.getLong(offset + 9)));
        entity.setFechaHoraReg(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setPropietario(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIdSemanaEpidemiologica(cursor.getInt(offset + 12));
        entity.setIdUsuarioMod(cursor.getLong(offset + 13));
        entity.setIdSibasi(cursor.getLong(offset + 14));
        entity.setIdTablet(cursor.getLong(offset + 15));
        entity.setIdCaserio(cursor.getLong(offset + 16));
        entity.setIdUsuarioReg(cursor.getLong(offset + 17));
        entity.setIdTipoCaptura(cursor.getLong(offset + 18));
        entity.setIdTipoActividad(cursor.getLong(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PlCapturaAnopheles entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PlCapturaAnopheles entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PlCapturaAnopheles entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCtlEstablecimientoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getCtlCaserioDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getCtlTabletDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getFosUserUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T4", daoSession.getPlTipoCapturaDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T5", daoSession.getPlTipoActividadDao().getAllColumns());
            builder.append(" FROM PL_CAPTURA_ANOPHELES T");
            builder.append(" LEFT JOIN CTL_ESTABLECIMIENTO T0 ON T.\"ID_SIBASI\"=T0.\"ID\"");
            builder.append(" LEFT JOIN CTL_CASERIO T1 ON T.\"ID_CASERIO\"=T1.\"ID\"");
            builder.append(" LEFT JOIN CTL_TABLET T2 ON T.\"ID_TABLET\"=T2.\"ID\"");
            builder.append(" LEFT JOIN FOS_USER_USER T3 ON T.\"ID_USUARIO_REG\"=T3.\"ID\"");
            builder.append(" LEFT JOIN PL_TIPO_CAPTURA T4 ON T.\"ID_TIPO_CAPTURA\"=T4.\"ID\"");
            builder.append(" LEFT JOIN PL_TIPO_ACTIVIDAD T5 ON T.\"ID_TIPO_ACTIVIDAD\"=T5.\"ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected PlCapturaAnopheles loadCurrentDeep(Cursor cursor, boolean lock) {
        PlCapturaAnopheles entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        CtlEstablecimiento ctlEstablecimiento = loadCurrentOther(daoSession.getCtlEstablecimientoDao(), cursor, offset);
         if(ctlEstablecimiento != null) {
            entity.setCtlEstablecimiento(ctlEstablecimiento);
        }
        offset += daoSession.getCtlEstablecimientoDao().getAllColumns().length;

        CtlCaserio ctlCaserio = loadCurrentOther(daoSession.getCtlCaserioDao(), cursor, offset);
         if(ctlCaserio != null) {
            entity.setCtlCaserio(ctlCaserio);
        }
        offset += daoSession.getCtlCaserioDao().getAllColumns().length;

        CtlTablet ctlTablet = loadCurrentOther(daoSession.getCtlTabletDao(), cursor, offset);
         if(ctlTablet != null) {
            entity.setCtlTablet(ctlTablet);
        }
        offset += daoSession.getCtlTabletDao().getAllColumns().length;

        FosUserUser fosUserUser = loadCurrentOther(daoSession.getFosUserUserDao(), cursor, offset);
         if(fosUserUser != null) {
            entity.setFosUserUser(fosUserUser);
        }
        offset += daoSession.getFosUserUserDao().getAllColumns().length;

        PlTipoCaptura plTipoCaptura = loadCurrentOther(daoSession.getPlTipoCapturaDao(), cursor, offset);
         if(plTipoCaptura != null) {
            entity.setPlTipoCaptura(plTipoCaptura);
        }
        offset += daoSession.getPlTipoCapturaDao().getAllColumns().length;

        PlTipoActividad plTipoActividad = loadCurrentOther(daoSession.getPlTipoActividadDao(), cursor, offset);
         if(plTipoActividad != null) {
            entity.setPlTipoActividad(plTipoActividad);
        }

        return entity;    
    }

    public PlCapturaAnopheles loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<PlCapturaAnopheles> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<PlCapturaAnopheles> list = new ArrayList<PlCapturaAnopheles>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<PlCapturaAnopheles> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<PlCapturaAnopheles> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
