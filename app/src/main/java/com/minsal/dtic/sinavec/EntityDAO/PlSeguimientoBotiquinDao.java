package com.minsal.dtic.sinavec.EntityDAO;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PL_SEGUIMIENTO_BOTIQUIN".
*/
public class PlSeguimientoBotiquinDao extends AbstractDao<PlSeguimientoBotiquin, Long> {

    public static final String TABLENAME = "PL_SEGUIMIENTO_BOTIQUIN";

    /**
     * Properties of entity PlSeguimientoBotiquin.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property IdEstadoFormulario = new Property(1, int.class, "idEstadoFormulario", false, "ID_ESTADO_FORMULARIO");
        public final static Property Supervisado = new Property(2, int.class, "supervisado", false, "SUPERVISADO");
        public final static Property Visitado = new Property(3, int.class, "visitado", false, "VISITADO");
        public final static Property EnRiesgo = new Property(4, int.class, "enRiesgo", false, "EN_RIESGO");
        public final static Property NumeroPersonaDivulgo = new Property(5, int.class, "numeroPersonaDivulgo", false, "NUMERO_PERSONA_DIVULGO");
        public final static Property FechaHoraReg = new Property(6, java.util.Date.class, "fechaHoraReg", false, "FECHA_HORA_REG");
        public final static Property FechaHoraMod = new Property(7, java.util.Date.class, "fechaHoraMod", false, "FECHA_HORA_MOD");
        public final static Property Fecha = new Property(8, java.util.Date.class, "fecha", false, "FECHA");
        public final static Property IdSemanaEpidemiologica = new Property(9, int.class, "idSemanaEpidemiologica", false, "ID_SEMANA_EPIDEMIOLOGICA");
        public final static Property FechaRegistro = new Property(10, java.util.Date.class, "fechaRegistro", false, "FECHA_REGISTRO");
        public final static Property NumeroMuestra = new Property(11, int.class, "numeroMuestra", false, "NUMERO_MUESTRA");
        public final static Property IdUsuarioMod = new Property(12, int.class, "idUsuarioMod", false, "ID_USUARIO_MOD");
        public final static Property Estado_sync = new Property(13, int.class, "estado_sync", false, "ESTADO_SYNC");
        public final static Property IdClave = new Property(14, long.class, "idClave", false, "ID_CLAVE");
        public final static Property IdTablet = new Property(15, long.class, "idTablet", false, "ID_TABLET");
        public final static Property IdUsuarioReg = new Property(16, long.class, "idUsuarioReg", false, "ID_USUARIO_REG");
        public final static Property IdSibasi = new Property(17, long.class, "idSibasi", false, "ID_SIBASI");
    }

    private DaoSession daoSession;


    public PlSeguimientoBotiquinDao(DaoConfig config) {
        super(config);
    }
    
    public PlSeguimientoBotiquinDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PL_SEGUIMIENTO_BOTIQUIN\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ID_ESTADO_FORMULARIO\" INTEGER NOT NULL ," + // 1: idEstadoFormulario
                "\"SUPERVISADO\" INTEGER NOT NULL ," + // 2: supervisado
                "\"VISITADO\" INTEGER NOT NULL ," + // 3: visitado
                "\"EN_RIESGO\" INTEGER NOT NULL ," + // 4: enRiesgo
                "\"NUMERO_PERSONA_DIVULGO\" INTEGER NOT NULL ," + // 5: numeroPersonaDivulgo
                "\"FECHA_HORA_REG\" INTEGER," + // 6: fechaHoraReg
                "\"FECHA_HORA_MOD\" INTEGER," + // 7: fechaHoraMod
                "\"FECHA\" INTEGER NOT NULL ," + // 8: fecha
                "\"ID_SEMANA_EPIDEMIOLOGICA\" INTEGER NOT NULL ," + // 9: idSemanaEpidemiologica
                "\"FECHA_REGISTRO\" INTEGER NOT NULL ," + // 10: fechaRegistro
                "\"NUMERO_MUESTRA\" INTEGER NOT NULL ," + // 11: numeroMuestra
                "\"ID_USUARIO_MOD\" INTEGER NOT NULL ," + // 12: idUsuarioMod
                "\"ESTADO_SYNC\" INTEGER NOT NULL ," + // 13: estado_sync
                "\"ID_CLAVE\" INTEGER NOT NULL ," + // 14: idClave
                "\"ID_TABLET\" INTEGER NOT NULL ," + // 15: idTablet
                "\"ID_USUARIO_REG\" INTEGER NOT NULL ," + // 16: idUsuarioReg
                "\"ID_SIBASI\" INTEGER NOT NULL ,"+"FOREIGN KEY(\"ID_CLAVE\")" +
                " REFERENCES CLAVE(\"ID\") ON DELETE CASCADE,"+"FOREIGN KEY(\"ID_TABLET\")" +
                " REFERENCES CTL_TABLET(\"ID\") ON DELETE CASCADE,"+"FOREIGN KEY(\"ID_USUARIO_REG\")" +
                " REFERENCES FOS_USER_USER(\"ID\") ON DELETE CASCADE,"+"FOREIGN KEY(\"ID_SIBASI\")" +
                " REFERENCES CTL_ESTABLECIMIENTO(\"ID\") ON DELETE CASCADE );"); // 16: idSibasi
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PL_SEGUIMIENTO_BOTIQUIN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PlSeguimientoBotiquin entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIdEstadoFormulario());
        stmt.bindLong(3, entity.getSupervisado());
        stmt.bindLong(4, entity.getVisitado());
        stmt.bindLong(5, entity.getEnRiesgo());
        stmt.bindLong(6, entity.getNumeroPersonaDivulgo());

        String fechaHoraReg = entity.getFechaHoraReg();
        if (fechaHoraReg != null) {
            stmt.bindString(7, fechaHoraReg);
        }

        String fechaHoraMod = entity.getFechaHoraMod();
        if (fechaHoraMod != null) {
            stmt.bindString(8, fechaHoraMod);
        }
        stmt.bindLong(9, entity.getFecha().getTime());
        stmt.bindLong(10, entity.getIdSemanaEpidemiologica());
        stmt.bindLong(11, entity.getFechaRegistro().getTime());
        stmt.bindLong(12, entity.getNumeroMuestra());
        stmt.bindLong(13, entity.getIdUsuarioMod());
        stmt.bindLong(14, entity.getEstado_sync());
        stmt.bindLong(15, entity.getIdClave());
        stmt.bindLong(16, entity.getIdTablet());
        stmt.bindLong(17, entity.getIdUsuarioReg());
        stmt.bindLong(18, entity.getIdSibasi());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PlSeguimientoBotiquin entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIdEstadoFormulario());
        stmt.bindLong(3, entity.getSupervisado());
        stmt.bindLong(4, entity.getVisitado());
        stmt.bindLong(5, entity.getEnRiesgo());
        stmt.bindLong(6, entity.getNumeroPersonaDivulgo());
 
       String fechaHoraReg = entity.getFechaHoraReg();
        if (fechaHoraReg != null) {
            stmt.bindString(7, fechaHoraReg);
        }

        String fechaHoraMod = entity.getFechaHoraMod();
        if (fechaHoraMod != null) {
            stmt.bindString(8, fechaHoraMod);
        }
        stmt.bindLong(9, entity.getFecha().getTime());
        stmt.bindLong(10, entity.getIdSemanaEpidemiologica());
        stmt.bindLong(11, entity.getFechaRegistro().getTime());
        stmt.bindLong(12, entity.getNumeroMuestra());
        stmt.bindLong(13, entity.getIdUsuarioMod());
        stmt.bindLong(14, entity.getEstado_sync());
        stmt.bindLong(15, entity.getIdClave());
        stmt.bindLong(16, entity.getIdTablet());
        stmt.bindLong(17, entity.getIdUsuarioReg());
        stmt.bindLong(18, entity.getIdSibasi());
    }

    @Override
    protected final void attachEntity(PlSeguimientoBotiquin entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PlSeguimientoBotiquin readEntity(Cursor cursor, int offset) {
        PlSeguimientoBotiquin entity = new PlSeguimientoBotiquin( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // idEstadoFormulario
            cursor.getInt(offset + 2), // supervisado
            cursor.getInt(offset + 3), // visitado
            cursor.getInt(offset + 4), // enRiesgo
            cursor.getInt(offset + 5), // numeroPersonaDivulgo
            cursor.getString(offset + 6), // fechaHoraReg
            cursor.getString(offset + 7), // fechaHoraMod
            new java.util.Date(cursor.getLong(offset + 8)), // fecha
            cursor.getInt(offset + 9), // idSemanaEpidemiologica
            new java.util.Date(cursor.getLong(offset + 10)), // fechaRegistro
            cursor.getInt(offset + 11), // numeroMuestra
            cursor.getInt(offset + 12), // idUsuarioMod
            cursor.getInt(offset + 13), // estado_sync
            cursor.getLong(offset + 14), // idClave
            cursor.getLong(offset + 15), // idTablet
            cursor.getLong(offset + 16), // idUsuarioReg
            cursor.getLong(offset + 17) // idSibasi
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PlSeguimientoBotiquin entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdEstadoFormulario(cursor.getInt(offset + 1));
        entity.setSupervisado(cursor.getInt(offset + 2));
        entity.setVisitado(cursor.getInt(offset + 3));
        entity.setEnRiesgo(cursor.getInt(offset + 4));
        entity.setNumeroPersonaDivulgo(cursor.getInt(offset + 5));
        entity.setFechaHoraReg(cursor.getString(offset + 6));
        entity.setFechaHoraMod(cursor.getString(offset + 7));
        entity.setFecha(new java.util.Date(cursor.getLong(offset + 8)));
        entity.setIdSemanaEpidemiologica(cursor.getInt(offset + 9));
        entity.setFechaRegistro(new java.util.Date(cursor.getLong(offset + 10)));
        entity.setNumeroMuestra(cursor.getInt(offset + 11));
        entity.setIdUsuarioMod(cursor.getInt(offset + 12));
        entity.setEstado_sync(cursor.getInt(offset + 13));
        entity.setIdClave(cursor.getLong(offset + 14));
        entity.setIdTablet(cursor.getLong(offset + 15));
        entity.setIdUsuarioReg(cursor.getLong(offset + 16));
        entity.setIdSibasi(cursor.getLong(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PlSeguimientoBotiquin entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PlSeguimientoBotiquin entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PlSeguimientoBotiquin entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getClaveDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getCtlTabletDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getFosUserUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getCtlEstablecimientoDao().getAllColumns());
            builder.append(" FROM PL_SEGUIMIENTO_BOTIQUIN T");
            builder.append(" LEFT JOIN CLAVE T0 ON T.\"ID_CLAVE\"=T0.\"ID\"");
            builder.append(" LEFT JOIN CTL_TABLET T1 ON T.\"ID_TABLET\"=T1.\"ID\"");
            builder.append(" LEFT JOIN FOS_USER_USER T2 ON T.\"ID_USUARIO_REG\"=T2.\"ID\"");
            builder.append(" LEFT JOIN CTL_ESTABLECIMIENTO T3 ON T.\"ID_SIBASI\"=T3.\"ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected PlSeguimientoBotiquin loadCurrentDeep(Cursor cursor, boolean lock) {
        PlSeguimientoBotiquin entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Clave clave = loadCurrentOther(daoSession.getClaveDao(), cursor, offset);
         if(clave != null) {
            entity.setClave(clave);
        }
        offset += daoSession.getClaveDao().getAllColumns().length;

        CtlTablet ctlTablet = loadCurrentOther(daoSession.getCtlTabletDao(), cursor, offset);
         if(ctlTablet != null) {
            entity.setCtlTablet(ctlTablet);
        }
        offset += daoSession.getCtlTabletDao().getAllColumns().length;

        FosUserUser fosUserUser = loadCurrentOther(daoSession.getFosUserUserDao(), cursor, offset);
         if(fosUserUser != null) {
            entity.setFosUserUser(fosUserUser);
        }
        offset += daoSession.getFosUserUserDao().getAllColumns().length;

        CtlEstablecimiento ctlEstablecimiento = loadCurrentOther(daoSession.getCtlEstablecimientoDao(), cursor, offset);
         if(ctlEstablecimiento != null) {
            entity.setCtlEstablecimiento(ctlEstablecimiento);
        }

        return entity;    
    }

    public PlSeguimientoBotiquin loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<PlSeguimientoBotiquin> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<PlSeguimientoBotiquin> list = new ArrayList<PlSeguimientoBotiquin>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<PlSeguimientoBotiquin> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<PlSeguimientoBotiquin> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
