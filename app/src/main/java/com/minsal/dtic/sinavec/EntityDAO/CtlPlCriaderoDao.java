package com.minsal.dtic.sinavec.EntityDAO;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CTL_PL_CRIADERO".
*/
public class CtlPlCriaderoDao extends AbstractDao<CtlPlCriadero, Long> {

    public static final String TABLENAME = "CTL_PL_CRIADERO";

    /**
     * Properties of entity CtlPlCriadero.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property IdTipoCriadero = new Property(1, Integer.class, "idTipoCriadero", false, "ID_TIPO_CRIADERO");
        public final static Property IdEstadoCriadero = new Property(2, Integer.class, "idEstadoCriadero", false, "ID_ESTADO_CRIADERO");
        public final static Property Nombre = new Property(3, String.class, "nombre", false, "NOMBRE");
        public final static Property Descripcion = new Property(4, String.class, "descripcion", false, "DESCRIPCION");
        public final static Property Latitud = new Property(5, String.class, "latitud", false, "LATITUD");
        public final static Property Longitud = new Property(6, String.class, "longitud", false, "LONGITUD");
        public final static Property LongitudCriadero = new Property(7, int.class, "longitudCriadero", false, "LONGITUD_CRIADERO");
        public final static Property AnchoCriadero = new Property(8, int.class, "anchoCriadero", false, "ANCHO_CRIADERO");
        public final static Property FechaHoraReg = new Property(9, java.util.Date.class, "fechaHoraReg", false, "FECHA_HORA_REG");
        public final static Property FechaHoraMod = new Property(10, java.util.Date.class, "fechaHoraMod", false, "FECHA_HORA_MOD");
        public final static Property IdUsarioReg = new Property(11, long.class, "idUsarioReg", false, "ID_USARIO_REG");
        public final static Property IdSibasi = new Property(12, long.class, "idSibasi", false, "ID_SIBASI");
        public final static Property IdCaserio = new Property(13, long.class, "idCaserio", false, "ID_CASERIO");
        public final static Property IdUsuarioMod = new Property(14, long.class, "idUsuarioMod", false, "ID_USUARIO_MOD");
    }

    private DaoSession daoSession;


    public CtlPlCriaderoDao(DaoConfig config) {
        super(config);
    }
    
    public CtlPlCriaderoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CTL_PL_CRIADERO\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ID_TIPO_CRIADERO\" INTEGER," + // 1: idTipoCriadero
                "\"ID_ESTADO_CRIADERO\" INTEGER," + // 2: idEstadoCriadero
                "\"NOMBRE\" TEXT NOT NULL ," + // 3: nombre
                "\"DESCRIPCION\" TEXT NOT NULL ," + // 4: descripcion
                "\"LATITUD\" TEXT," + // 5: latitud
                "\"LONGITUD\" TEXT," + // 6: longitud
                "\"LONGITUD_CRIADERO\" INTEGER NOT NULL ," + // 7: longitudCriadero
                "\"ANCHO_CRIADERO\" INTEGER NOT NULL ," + // 8: anchoCriadero
                "\"FECHA_HORA_REG\" INTEGER," + // 9: fechaHoraReg
                "\"FECHA_HORA_MOD\" INTEGER," + // 10: fechaHoraMod
                "\"ID_USARIO_REG\" INTEGER NOT NULL ," + // 11: idUsarioReg
                "\"ID_SIBASI\" INTEGER NOT NULL ," + // 12: idSibasi
                "\"ID_CASERIO\" INTEGER NOT NULL ," + // 13: idCaserio
                "\"ID_USUARIO_MOD\" INTEGER NOT NULL ,"+"FOREIGN KEY(\"ID_SIBASI\")" +
                " REFERENCES CTL_ESTABLECIMIENTO(\"ID\") ON DELETE CASCADE,"+"FOREIGN KEY(\"ID_CASERIO\")" +
                " REFERENCES CTL_CASERIO(\"ID\") ON DELETE CASCADE,"+"FOREIGN KEY(\"ID_USUARIO_MOD\")" +
                " REFERENCES FOS_USER_USER(\"ID\") ON DELETE CASCADE );"); // 14: idUsuarioMod
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CTL_PL_CRIADERO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CtlPlCriadero entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer idTipoCriadero = entity.getIdTipoCriadero();
        if (idTipoCriadero != null) {
            stmt.bindLong(2, idTipoCriadero);
        }
 
        Integer idEstadoCriadero = entity.getIdEstadoCriadero();
        if (idEstadoCriadero != null) {
            stmt.bindLong(3, idEstadoCriadero);
        }
        stmt.bindString(4, entity.getNombre());
        stmt.bindString(5, entity.getDescripcion());
 
        String latitud = entity.getLatitud();
        if (latitud != null) {
            stmt.bindString(6, latitud);
        }
 
        String longitud = entity.getLongitud();
        if (longitud != null) {
            stmt.bindString(7, longitud);
        }
        stmt.bindLong(8, entity.getLongitudCriadero());
        stmt.bindLong(9, entity.getAnchoCriadero());
 
        java.util.Date fechaHoraReg = entity.getFechaHoraReg();
        if (fechaHoraReg != null) {
            stmt.bindLong(10, fechaHoraReg.getTime());
        }
 
        java.util.Date fechaHoraMod = entity.getFechaHoraMod();
        if (fechaHoraMod != null) {
            stmt.bindLong(11, fechaHoraMod.getTime());
        }
        stmt.bindLong(12, entity.getIdUsarioReg());
        stmt.bindLong(13, entity.getIdSibasi());
        stmt.bindLong(14, entity.getIdCaserio());
        stmt.bindLong(15, entity.getIdUsuarioMod());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CtlPlCriadero entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer idTipoCriadero = entity.getIdTipoCriadero();
        if (idTipoCriadero != null) {
            stmt.bindLong(2, idTipoCriadero);
        }
 
        Integer idEstadoCriadero = entity.getIdEstadoCriadero();
        if (idEstadoCriadero != null) {
            stmt.bindLong(3, idEstadoCriadero);
        }
        stmt.bindString(4, entity.getNombre());
        stmt.bindString(5, entity.getDescripcion());
 
        String latitud = entity.getLatitud();
        if (latitud != null) {
            stmt.bindString(6, latitud);
        }
 
        String longitud = entity.getLongitud();
        if (longitud != null) {
            stmt.bindString(7, longitud);
        }
        stmt.bindLong(8, entity.getLongitudCriadero());
        stmt.bindLong(9, entity.getAnchoCriadero());
 
        java.util.Date fechaHoraReg = entity.getFechaHoraReg();
        if (fechaHoraReg != null) {
            stmt.bindLong(10, fechaHoraReg.getTime());
        }
 
        java.util.Date fechaHoraMod = entity.getFechaHoraMod();
        if (fechaHoraMod != null) {
            stmt.bindLong(11, fechaHoraMod.getTime());
        }
        stmt.bindLong(12, entity.getIdUsarioReg());
        stmt.bindLong(13, entity.getIdSibasi());
        stmt.bindLong(14, entity.getIdCaserio());
        stmt.bindLong(15, entity.getIdUsuarioMod());
    }

    @Override
    protected final void attachEntity(CtlPlCriadero entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CtlPlCriadero readEntity(Cursor cursor, int offset) {
        CtlPlCriadero entity = new CtlPlCriadero( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // idTipoCriadero
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // idEstadoCriadero
            cursor.getString(offset + 3), // nombre
            cursor.getString(offset + 4), // descripcion
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // latitud
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // longitud
            cursor.getInt(offset + 7), // longitudCriadero
            cursor.getInt(offset + 8), // anchoCriadero
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // fechaHoraReg
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // fechaHoraMod
            cursor.getLong(offset + 11), // idUsarioReg
            cursor.getLong(offset + 12), // idSibasi
            cursor.getLong(offset + 13), // idCaserio
            cursor.getLong(offset + 14) // idUsuarioMod
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CtlPlCriadero entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdTipoCriadero(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setIdEstadoCriadero(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setNombre(cursor.getString(offset + 3));
        entity.setDescripcion(cursor.getString(offset + 4));
        entity.setLatitud(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLongitud(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLongitudCriadero(cursor.getInt(offset + 7));
        entity.setAnchoCriadero(cursor.getInt(offset + 8));
        entity.setFechaHoraReg(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setFechaHoraMod(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setIdUsarioReg(cursor.getLong(offset + 11));
        entity.setIdSibasi(cursor.getLong(offset + 12));
        entity.setIdCaserio(cursor.getLong(offset + 13));
        entity.setIdUsuarioMod(cursor.getLong(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CtlPlCriadero entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CtlPlCriadero entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CtlPlCriadero entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCtlEstablecimientoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getCtlCaserioDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getFosUserUserDao().getAllColumns());
            builder.append(" FROM CTL_PL_CRIADERO T");
            builder.append(" LEFT JOIN CTL_ESTABLECIMIENTO T0 ON T.\"ID_SIBASI\"=T0.\"ID\"");
            builder.append(" LEFT JOIN CTL_CASERIO T1 ON T.\"ID_CASERIO\"=T1.\"ID\"");
            builder.append(" LEFT JOIN FOS_USER_USER T2 ON T.\"ID_USUARIO_MOD\"=T2.\"ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected CtlPlCriadero loadCurrentDeep(Cursor cursor, boolean lock) {
        CtlPlCriadero entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        CtlEstablecimiento ctlEstablecimiento = loadCurrentOther(daoSession.getCtlEstablecimientoDao(), cursor, offset);
         if(ctlEstablecimiento != null) {
            entity.setCtlEstablecimiento(ctlEstablecimiento);
        }
        offset += daoSession.getCtlEstablecimientoDao().getAllColumns().length;

        CtlCaserio ctlCaserio = loadCurrentOther(daoSession.getCtlCaserioDao(), cursor, offset);
         if(ctlCaserio != null) {
            entity.setCtlCaserio(ctlCaserio);
        }
        offset += daoSession.getCtlCaserioDao().getAllColumns().length;

        FosUserUser fosUserUser = loadCurrentOther(daoSession.getFosUserUserDao(), cursor, offset);
         if(fosUserUser != null) {
            entity.setFosUserUser(fosUserUser);
        }

        return entity;    
    }

    public CtlPlCriadero loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<CtlPlCriadero> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<CtlPlCriadero> list = new ArrayList<CtlPlCriadero>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<CtlPlCriadero> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<CtlPlCriadero> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
