package com.minsal.dtic.sinavec.EntityDAO;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CTL_TABLET".
*/
public class CtlTabletDao extends AbstractDao<CtlTablet, Long> {

    public static final String TABLENAME = "CTL_TABLET";

    /**
     * Properties of entity CtlTablet.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Codigo = new Property(1, String.class, "codigo", false, "CODIGO");
        public final static Property Serie = new Property(2, String.class, "serie", false, "SERIE");
        public final static Property UltimoRegBajado = new Property(3, Integer.class, "ultimoRegBajado", false, "ULTIMO_REG_BAJADO");
        public final static Property IdSibasi = new Property(4, long.class, "idSibasi", false, "ID_SIBASI");
    }

    private DaoSession daoSession;


    public CtlTabletDao(DaoConfig config) {
        super(config);
    }
    
    public CtlTabletDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CTL_TABLET\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CODIGO\" TEXT," + // 1: codigo
                "\"SERIE\" TEXT," + // 2: serie
                "\"ULTIMO_REG_BAJADO\" INTEGER," + // 3: ultimoRegBajado
                "\"ID_SIBASI\" INTEGER NOT NULL );"); // 4: idSibasi
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CTL_TABLET\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CtlTablet entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String codigo = entity.getCodigo();
        if (codigo != null) {
            stmt.bindString(2, codigo);
        }
 
        String serie = entity.getSerie();
        if (serie != null) {
            stmt.bindString(3, serie);
        }
 
        Integer ultimoRegBajado = entity.getUltimoRegBajado();
        if (ultimoRegBajado != null) {
            stmt.bindLong(4, ultimoRegBajado);
        }
        stmt.bindLong(5, entity.getIdSibasi());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CtlTablet entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String codigo = entity.getCodigo();
        if (codigo != null) {
            stmt.bindString(2, codigo);
        }
 
        String serie = entity.getSerie();
        if (serie != null) {
            stmt.bindString(3, serie);
        }
 
        Integer ultimoRegBajado = entity.getUltimoRegBajado();
        if (ultimoRegBajado != null) {
            stmt.bindLong(4, ultimoRegBajado);
        }
        stmt.bindLong(5, entity.getIdSibasi());
    }

    @Override
    protected final void attachEntity(CtlTablet entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CtlTablet readEntity(Cursor cursor, int offset) {
        CtlTablet entity = new CtlTablet( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // codigo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // serie
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // ultimoRegBajado
            cursor.getLong(offset + 4) // idSibasi
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CtlTablet entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCodigo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSerie(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUltimoRegBajado(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setIdSibasi(cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CtlTablet entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CtlTablet entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CtlTablet entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCtlEstablecimientoDao().getAllColumns());
            builder.append(" FROM CTL_TABLET T");
            builder.append(" LEFT JOIN CTL_ESTABLECIMIENTO T0 ON T.\"ID_SIBASI\"=T0.\"ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected CtlTablet loadCurrentDeep(Cursor cursor, boolean lock) {
        CtlTablet entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        CtlEstablecimiento ctlEstablecimiento = loadCurrentOther(daoSession.getCtlEstablecimientoDao(), cursor, offset);
         if(ctlEstablecimiento != null) {
            entity.setCtlEstablecimiento(ctlEstablecimiento);
        }

        return entity;    
    }

    public CtlTablet loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<CtlTablet> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<CtlTablet> list = new ArrayList<CtlTablet>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<CtlTablet> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<CtlTablet> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
