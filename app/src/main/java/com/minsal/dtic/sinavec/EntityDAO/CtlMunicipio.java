package com.minsal.dtic.sinavec.EntityDAO;

import org.greenrobot.greendao.annotation.*;

import com.minsal.dtic.sinavec.EntityDAO.DaoSession;
import org.greenrobot.greendao.DaoException;

import java.io.Serializable;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "CTL_MUNICIPIO".
 */
@Entity(active = true)
public class CtlMunicipio implements Serializable {

    @Id
    private Long id;
    private String nombre;
    private Integer idDeptoApoyo;
    private long idDepartamento;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient CtlMunicipioDao myDao;

    @ToOne(joinProperty = "idDepartamento")
    private CtlDepartamento ctlDepartamento;

    @Generated
    private transient Long ctlDepartamento__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public CtlMunicipio() {
    }

    public CtlMunicipio(Long id) {
        this.id = id;
    }

    @Generated
    public CtlMunicipio(Long id, String nombre, Integer idDeptoApoyo, long idDepartamento) {
        this.id = id;
        this.nombre = nombre;
        this.idDeptoApoyo = idDeptoApoyo;
        this.idDepartamento = idDepartamento;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCtlMunicipioDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public Integer getIdDeptoApoyo() {
        return idDeptoApoyo;
    }

    public void setIdDeptoApoyo(Integer idDeptoApoyo) {
        this.idDeptoApoyo = idDeptoApoyo;
    }

    public long getIdDepartamento() {
        return idDepartamento;
    }

    public void setIdDepartamento(long idDepartamento) {
        this.idDepartamento = idDepartamento;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public CtlDepartamento getCtlDepartamento() {
        long __key = this.idDepartamento;
        if (ctlDepartamento__resolvedKey == null || !ctlDepartamento__resolvedKey.equals(__key)) {
            __throwIfDetached();
            CtlDepartamentoDao targetDao = daoSession.getCtlDepartamentoDao();
            CtlDepartamento ctlDepartamentoNew = targetDao.load(__key);
            synchronized (this) {
                ctlDepartamento = ctlDepartamentoNew;
            	ctlDepartamento__resolvedKey = __key;
            }
        }
        return ctlDepartamento;
    }

    @Generated
    public void setCtlDepartamento(CtlDepartamento ctlDepartamento) {
        if (ctlDepartamento == null) {
            throw new DaoException("To-one property 'idDepartamento' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.ctlDepartamento = ctlDepartamento;
            idDepartamento = ctlDepartamento.getId();
            ctlDepartamento__resolvedKey = idDepartamento;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
